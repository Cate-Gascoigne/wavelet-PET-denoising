import os
import numpy as np
import nibabel as nib
import warnings
warnings.filterwarnings("ignore")
from networks.FCN_3D import SR_UnetGAN_3D


class Predictor:
    def __init__(
        self,
        # List of paths containing test low-dose PET images with different DRFs.
        lowdose_dirs,
        # Path of PET reconstructions generated by model.
        recn_path,
        # Path of trained 3D-UNet model.
        model_path,
        # Epoch number to be used.
        epoch,
    ):
        self.lowdose_dirs = lowdose_dirs
        self.recn_path = recn_path
        self.unet = SR_UnetGAN_3D(img_shape=(1, 64, 64, 64))  
        self.unet.generator.load_weights(os.path.join(model_path, 'generator_epoch_' + str(epoch) + '.hdf5'))

    def _load_subject(self, lowdose_dir, subject):
        """
        Load a single test lowdose array.
        :param subject: Subject nifti file name, in forms of PID.nii.gz.
        :return: Subject filename, subject affine, and lowdose array.
        """
        while True:
            # Load lowdose test data
            low_array = nib.load(os.path.join(lowdose_dir, subject)).get_fdata()
            affine = nib.load(os.path.join(lowdose_dir, subject)).affine
            yield subject, affine, low_array

    def _normalize(self, data):
        """
        Normalize input array to (0, 1).
        :param data: Numpy array consisting of a PET image.
        :return: Normalized data, and tuple of (minimum, range) used for denormalization.
        """
        d_range = np.max(data) - np.min(data)
        return (data - np.min(data)) / d_range, (np.min(data), d_range)

    def _denormalize(self, data, d_min, d_range):
        """
        Denormalize input array from (0, 1) back to original spacing.
        :param data: Normalized numpy array a PET image.
        :param d_min: Minimum value used while normalization.
        :param d_range: Range value used while normalization.
        :return: Denormalized PET image array.
        """
        return data * d_range + d_min

    def _from_small_path(self, PET, generator, patch_size=64):
        """
        Apply generator model to small patches. 
        Patches are extracted and re-generated along x, y, z axes in a sliding window fashion. 
        :param PET: Lowdose PET image to be enhanced in shape of (x, y, z).
        :param generator: UNet 3D generator with weights loaded.
        :param patch_size: Volume shape of small patch, by default set to 64. 
        :return: PET image enhanced by model.
        """
        stride = patch_size // 4
        i_x, i_y, i_z = PET.shape
        volume = np.zeros(shape=PET.shape) 
        count_matrix = np.zeros(shape=PET.shape)
        for z in range((i_z - patch_size) // stride + 1):
            for x in range((i_x - patch_size) // stride + 1):
                for y in range((i_y - patch_size) // stride + 1):
                    x_patch = PET[x*stride:x*stride+patch_size, y*stride:y*stride+patch_size, z*stride:z*stride+patch_size]
                    x_patch = np.expand_dims(x_patch, axis=0)
                    x_patch = np.expand_dims(x_patch, axis=0)
                    # Apply generator model to small patch
                    patch = generator.predict(x_patch)[0,0,:,:,:]
                    volume[x*stride:x*stride+patch_size, y*stride:y*stride+patch_size, z*stride:z*stride+patch_size] += patch
                    count_matrix[x*stride:x*stride+patch_size, y*stride:y*stride+patch_size, z*stride:z*stride+patch_size] += np.ones(patch.shape)
        volume /= count_matrix
        volume = np.nan_to_num(volume)
        return volume

    def load_test_dataset(self, lowdose_dir, subject):
        """
        Load a subject test dataset.
        :param lowdose_dir: Directory containing all test subjects with a specific DRF.
        :param subejct: Nifti file name of a test subject.
        :return: Numpy array of the test subject, minimum and range used while normalization, and subject affine.
        """
        # Load test data
        subject, affine, low_array = next(self._load_subject(
            lowdose_dir=lowdose_dir, 
            subject=subject
        ))
        print('Loading test subject data ' + str(subject)) 
        # Normalization
        ds_test, (min, range) = self._normalize(data=low_array)
        print('Normalization to (0, 1)')
        return ds_test, (min, range), affine

    def apply_generator(self, PET):
        """
        Apply generator model to a single PET. 
        :param PET: Lowdose PET image to be enhanced in shape of (x, y, z).
        :return: PET image enhanced.
        """
        print('Applying generator model...')
        PET_restored = self._from_small_path(
            PET=PET,
            generator=self.unet.generator
        )
        print(PET_restored.shape)
        return np.squeeze(PET_restored)

    def post_processing(self, model_output, d_min, d_range):
        """
        Post-processing applied to generator model output.
        :param model_output: PET image enhanced by generator model.
        :param d_min: Minimum value used while normalization.
        :param d_range: Range value used while normalization.
        :return: Processed PET image.
        """
        # De-normalization
        noisy_recn = self._denormalize(data=model_output, d_min=d_min, d_range=d_range)
        # Remove negative values
        noisy_recn = np.clip(noisy_recn, 0.0, np.max(noisy_recn))
        return noisy_recn

    def save_subject_recn(self, data, subject, subject_affine, save_dir):
        """
        Save PET reconstruction to Nifti file.
        :param data: PET image enhanced by model.
        :param subject: Nifti file name of a test subject.
        :param subject_affine: Numpy array of subject affine.
        :param save_dir: Directory storing output Nifti file.
        """
        nii = nib.Nifti1Image(data, affine=subject_affine)
        nib.save(nii, os.path.join(save_dir, subject))

    def predict_all(self):
        """Apply model to all listed lowdose directories"""
        for lowdose_dir in self.lowdose_dirs:
            DRF = os.path.basename(os.path.normpath(lowdose_dir))
            print('--------------- ' + DRF + ' -----------------')
            save_dir = os.path.join(self.recn_path, str(DRF))
            if not os.path.exists(save_dir):
                os.makedirs(save_dir)
            for subject in os.listdir(lowdose_dir):
                ds_test, (d_min, d_range), affine = self.load_test_dataset(lowdose_dir, subject)
                ds_test = self.apply_generator(ds_test)
                ds_test = self.post_processing(model_output=ds_test, d_min=d_min, d_range=d_range)
                self.save_subject_recn(ds_test, subject, affine, save_dir=save_dir)